name: Test Build
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  test-build:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Windows Dependencies
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          $vsPath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          if (-not (Test-Path $vsPath)) {
            iwr -useb aka.ms/vs/17/release/vs_buildtools.exe -outfile vs_buildtools.exe
            Start-Process -Wait -FilePath .\vs_buildtools.exe -ArgumentList "--quiet", "--wait", "--norestart", "--nocache", `
              "--installPath", "$env:ProgramFiles\Microsoft Visual Studio\2022\BuildTools", `
              "--add", "Microsoft.VisualStudio.Workload.VCTools", `
              "--add", "Microsoft.VisualStudio.Component.Windows10SDK.19041", `
              "--add", "Microsoft.VisualStudio.Component.VC.Tools.x86.x64"
          }

      - name: Install dependencies
        run: npm install

      - name: Build Next.js
        run: npm run build

      - name: Initial Rust Build
        working-directory: ./src-tauri
        run: cargo build --release

      # Debug step to list build outputs
      - name: List Build Output Directory
        shell: bash
        run: |
          echo "Listing src-tauri/target directory:"
          ls -R src-tauri/target/release/

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          includeRelease: false

      # Create output directory and copy files
      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p build-output
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            cp src-tauri/target/release/stormcard-reader.exe build-output/ || true
          else
            cp -r src-tauri/target/release/bundle/macos/stormcard-reader.app build-output/ || true
          fi
          echo "Build output contents:"
          ls -la build-output/

      # Upload build artifacts
      - uses: actions/upload-artifact@v4
        if: success()
        with:
          name: stormcard-reader-${{ matrix.platform }}
          path: build-output
          if-no-files-found: warn 